AWSTemplateFormatVersion: "2010-09-09"
Description: >
  This stack creates server infrastructure for Udagram

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to all resources name
    Type: String
    Default: UdagramCFProject
  AMIID:
    Description: The operating system of our server
    Type: String
  InstanceType:
    Description: The instance tyoe of our ec2 server
    Type: String
  ASGMinSize:
    Description: The minimum number of servers in our auto scaling group
    Type: String
  ASGMaxSize:
    Description: The maximum number of servers in our auto scaling group
    Type: String

Resources:
  # Application load balancer security group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Load balancer security group
      GroupDescription: Allows http traffic in and out of the load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Webserver Security Group
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: UdagramWebServer Security Group
      GroupDescription: This is the security group for the Udagram web application.
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # IAM Permissions
  # Instance Profile
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref S3ReadOnlyRole

  # S3 IAM Access Role
  S3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"

  # S3 Access Policy
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: "s3:*"
            Resource: "*"
      Roles:
        - !Ref S3ReadOnlyRole

  # Launch Configuration
  ASGLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install awscli -y
          apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://udagram-charles/index.html .
      ImageId: !Ref AMIID
      IamInstanceProfile: !Ref EC2InstanceProfile
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: 10

  # Auto Scaling Group
  WebAppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: UdagramASG
      LaunchConfigurationName:
        Ref: ASGLaunchConfiguration
      MaxSize: !Ref ASGMaxSize
      MinSize: !Ref ASGMinSize
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      TargetGroupARNs:
        - Ref: WebApplicationLoadBalancerTargetGroup

  # Application Load Balancer
  WebApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LoadBalancerSecurityGroup

  # Application Load Balancer Listener
  WebApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebApplicationLoadBalancerTargetGroup
      LoadBalancerArn:
        Ref: WebApplicationLoadBalancer
      Port: "80"
      Protocol: HTTP

  # Application Load Balancer Listener Rule
  WebApplicationLoadBalancerListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebApplicationLoadBalancerTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "WebApplicationLoadBalancerListener"
      Priority: 1

  # Application Load Balancer Target Group
  WebApplicationLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

# Outputs
Outputs:
  LoadBalancerPublicUrl:
    Description: This is the public url of our elastic load balancer
    Value: !Join ["", ["http://", !GetAtt WebApplicationLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-WEBAPP-LB
